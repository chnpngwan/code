// ----------------------------------------------------------------
// function foo(){
//   console.log(this.a);
// }

// var obj = {
//   a:2,
// }

// // call的作用是强行把this的执行改变到哪
// // 把foo的this指向obj
// foo.call(obj)
// ----------------------------------------------------------------
// call()

// function foo(n,m){
//   console.log(this.a,n,m);
// }

// var obj = {
//   a:2
// }

// // 第一个参数是call将foo()的this指向obj,后面两个参数是foo()自己要接受的参数，不过都交给call()来操作
// foo.call(obj,100,200)

// ----------------------------------------------------------------
// apply()

// function foo(n,m){
//   console.log(this.a,n,m);
// }

// var obj = {
//   a:2
// }

// // apply与call的效果相同，不过后面的参数接收的是数组
// foo.apply(obj,[100,200])
// ----------------------------------------------------------------
// function foo(n,m){
//   console.log(this.a,n,m);
// }

// var obj = {
//   a:2
// }

// // bar会返回一个函数体必须去执行它才会生效
// // var bar = foo.bind(obj,[100,200])
// // var bar = foo.bind(obj, 100, 200)

// var bar = foo.bind(obj,100)
// bar(200)

// bar()

// ----------------------------------------------------------------



// ----------------------------------------------------------------
