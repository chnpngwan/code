<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.cinema.mapper.MovieMapper">

    <resultMap id="movieActorVOMap" type="com.example.cinema.vo.MovieActorVO">
        <result column="id" property="id"/>
        <result column="name" property="name"/>
        <collection property="actorList" ofType="com.example.cinema.vo.ActorVO" javaType="java.util.List">
            <result column="actor_id" property="id"/>
            <result column="actor_name" property="name"/>
            <result column="actor_image" property="image"/>
        </collection>
    </resultMap>

    <update id="updateMovieImageByMovieId">
        update
            tb_movie
        set
            image = null
        where
            id = #{movieId}
    </update>

    <select id="getAreaByMovieId" resultType="com.example.cinema.entity.Area">
        SELECT
            a.id,
            a.`name`
        FROM
            tb_movie m
                LEFT JOIN tb_area a ON m.area_id = a.id
        WHERE
            m.id = #{movieId}
    </select>

    <select id="getAgeByMovieId" resultType="com.example.cinema.entity.Age">
        SELECT
            a.id,
            a.`name`
        FROM
            tb_movie m
                LEFT JOIN tb_age a ON m.age_id = a.id
        WHERE
            m.id = #{movieId}
    </select>

    <select id="getCategoryListByMovieId" resultType="com.example.cinema.entity.Category">
        SELECT
            c.id,
            c.`name`
        FROM
            tb_category c
                LEFT JOIN tb_movie_category mc ON mc.category_id = c.id
        WHERE
            mc.movie_id = #{movieId}
    </select>

    <select id="getMovieActorListByMovieId" resultMap="movieActorVOMap">
        SELECT
            d.`id`,
            d.`name`,
            a.`id` as actor_id,
            a.`name` as actor_name,
            a.`image` as actor_image
        FROM
            tb_movie_actor_duty mad
                LEFT JOIN tb_duty d ON mad.duty_id = d.id
                LEFT JOIN tb_actor a ON mad.actor_id = a.id
        WHERE
            mad.movie_id = #{movieId}
    </select>

    <select id="getOngoingMovieIdByCondition" resultType="java.lang.Integer">
        SELECT
            m.id
        FROM
            tb_movie m
                LEFT JOIN tb_lamination l ON m.id = l.movie_id
                LEFT JOIN tb_movie_category mc ON m.id = mc.movie_id
        WHERE
            l.start_date >= CURDATE()
        <if test="categoryId != 0">
            AND mc.category_id = #{categoryId}
        </if>
        <if test="areaId != 0">
            AND m.area_id = #{areaId}
        </if>
        <if test="ageId != 0">
            AND m.age_id = #{ageId}
        </if>
        <if test="orderType == 0">
            GROUP BY m.id
            ORDER BY m.release_time
        </if>
        <if test="orderType == 1">
            GROUP BY m.id
            ORDER BY m.score desc
        </if>
        LIMIT #{startRow}, #{size}
    </select>

    <select id="getOngoingMovieTotalByCondition" resultType="java.lang.Long">
        SELECT
            count(DISTINCT m.id)
        FROM
            tb_movie m
                LEFT JOIN tb_lamination l ON m.id = l.movie_id
                LEFT JOIN tb_movie_category mc ON m.id = mc.movie_id
        WHERE
            l.start_date >= CURDATE()
        <if test="categoryId != 0">
            AND mc.category_id = #{categoryId}
        </if>
        <if test="areaId != 0">
            AND m.area_id = #{areaId}
        </if>
        <if test="ageId != 0">
            AND m.age_id = #{ageId}
        </if>
    </select>

    <select id="getUpcomingMovieIdByCondition" resultType="java.lang.Integer">
        SELECT
            m.id
        FROM
            tb_movie m
                LEFT JOIN tb_movie_category mc ON m.id = mc.movie_id
        WHERE
            m.release_time >= CURRENT_TIMESTAMP()
        <if test="categoryId != 0">
            AND mc.category_id = #{categoryId}
        </if>
        <if test="areaId != 0">
            AND m.area_id = #{areaId}
        </if>
        <if test="ageId != 0">
            AND m.age_id = #{ageId}
        </if>
        <if test="orderType == 0">
            GROUP BY m.id
            ORDER BY m.release_time
        </if>
        <if test="orderType == 1">
            GROUP BY m.id
            ORDER BY m.score desc
        </if>
        LIMIT #{startRow}, #{size}
    </select>

    <select id="getUpcomingMovieTotalByCondition" resultType="java.lang.Long">
        SELECT
            count(DISTINCT m.id)
        FROM
            tb_movie m
                LEFT JOIN tb_movie_category mc ON m.id = mc.movie_id
        WHERE
        m.release_time >= CURRENT_TIMESTAMP()
        <if test="categoryId != 0">
            AND mc.category_id = #{categoryId}
        </if>
        <if test="areaId != 0">
            AND m.area_id = #{areaId}
        </if>
        <if test="ageId != 0">
            AND m.age_id = #{ageId}
        </if>
    </select>

    <select id="getClassicMovieIdByCondition" resultType="java.lang.Integer">
        SELECT
            m.id
        FROM
            tb_movie m
                LEFT JOIN tb_movie_category mc ON m.id = mc.movie_id
        WHERE
            CURRENT_TIMESTAMP() >= m.release_time
        <if test="categoryId != 0">
            AND mc.category_id = #{categoryId}
        </if>
        <if test="areaId != 0">
            AND m.area_id = #{areaId}
        </if>
        <if test="ageId != 0">
            AND m.age_id = #{ageId}
        </if>
        <if test="orderType == 0">
            GROUP BY m.id
            ORDER BY m.release_time
        </if>
        <if test="orderType == 1">
            GROUP BY m.id
            ORDER BY m.score desc
        </if>
        LIMIT #{startRow}, #{size}
    </select>

    <select id="getClassicMovieTotalByCondition" resultType="java.lang.Long">
        SELECT
            COUNT(DISTINCT m.id)
        FROM
            tb_movie m
                LEFT JOIN tb_movie_category mc ON m.id = mc.movie_id
        WHERE
            CURRENT_TIMESTAMP() >= m.release_time
        <if test="categoryId != 0">
            AND mc.category_id = #{categoryId}
        </if>
        <if test="areaId != 0">
            AND m.area_id = #{areaId}
        </if>
        <if test="ageId != 0">
            AND m.age_id = #{ageId}
        </if>
    </select>
    <select id="getTop100MovieIdList" resultType="com.example.cinema.entity.Rank">
        SELECT
            m.id,
            m.gross * 5 + b.comment_count * 4 + m.view_count * 1 AS score
        FROM
            tb_movie m
                LEFT JOIN ( SELECT movie_id, COUNT(*) AS comment_count FROM tb_comment GROUP BY movie_id ) b ON m.id = b.movie_id
        ORDER BY
            score desc
        LIMIT 100
    </select>
    <select id="getReputationMovieIdList" resultType="com.example.cinema.entity.Rank">
        SELECT
            m.id,
            m.score
        FROM
            tb_movie m
                LEFT JOIN tb_lamination l ON m.id = l.movie_id
        WHERE
            l.start_date >= CURDATE()
        ORDER BY m.score DESC
        LIMIT 100
    </select>
    <select id="getTodayGross" resultType="com.example.cinema.entity.Rank">
        SELECT
            movie_id as id,
            SUM(total_price) as score
        FROM
            tb_order o
                LEFT JOIN tb_lamination l ON o.lamination_id = l.id
        WHERE
            CONVERT (o.create_time, date) = CURRENT_DATE
        GROUP BY
            movie_id
        ORDER BY
            score DESC
        LIMIT 10
    </select>
</mapper>

